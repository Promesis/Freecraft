<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_main_8cpp_source" xml:lang="en-US">
<title>main.cpp</title>
<indexterm><primary>src/main.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_main_8cpp_source_1l00001"/>00001 <emphasis role="comment">//test&#32;if&#32;glfw&#32;can&#32;be&#32;compiled.</emphasis>
<anchor xml:id="_main_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&quot;glad/glad.h&quot;</emphasis>
<anchor xml:id="_main_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&quot;glfw/glfw3.h&quot;</emphasis>
<anchor xml:id="_main_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_fcglsl_8hpp">./graphics/fcglsl.hpp</link>&quot;</emphasis>
<anchor xml:id="_main_8cpp_source_1l00005"/>00005 
<anchor xml:id="_main_8cpp_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_main_8cpp_source_1l00007"/>00007 
<anchor xml:id="_main_8cpp_source_1l00008"/>00008 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_main_8cpp_1ad6d843569f32c27dfe18045f65cfb06e">framebufferSizeCallback</link>(GLFWwindow&#32;*,&#32;<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keywordtype">int</emphasis>);
<anchor xml:id="_main_8cpp_source_1l00009"/>00009 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_main_8cpp_1a8c653c7d0cb3661d19a644ef5ad0b255">inputCallback</link>(GLFWwindow&#32;*);
<anchor xml:id="_main_8cpp_source_1l00010"/>00010 
<anchor xml:id="_main_8cpp_source_1l00011"/><link linkend="_main_8cpp_1a57ce80b3e26f48b9731da8dded2f940c">00011</link> GLfloat&#32;<link linkend="_main_8cpp_1a57ce80b3e26f48b9731da8dded2f940c">coords</link>[]
<anchor xml:id="_main_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;{
<anchor xml:id="_main_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0.5,&#32;-0.5,&#32;0.0,
<anchor xml:id="_main_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.5,&#32;-0.5,&#32;0.0,
<anchor xml:id="_main_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.5,&#32;&#32;0.5,&#32;0.0
<anchor xml:id="_main_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;};
<anchor xml:id="_main_8cpp_source_1l00017"/>00017 
<anchor xml:id="_main_8cpp_source_1l00018"/><link linkend="_main_8cpp_1a30b1bd2dfe6289dd76b7c4e168393201">00018</link> <emphasis role="keyword">const</emphasis>&#32;GLchar&#32;*<link linkend="_main_8cpp_1a30b1bd2dfe6289dd76b7c4e168393201">fssrc</link>=<emphasis role="stringliteral">&quot;#version&#32;450&#32;core\nout&#32;vec4&#32;color;\nvoid&#32;main()\n{\n&#32;&#32;&#32;&#32;color&#32;=&#32;vec4(1.0,&#32;0.5,&#32;0.2,&#32;1.0);\n}&quot;</emphasis>,
<anchor xml:id="_main_8cpp_source_1l00019"/><link linkend="_main_8cpp_1af8ff29895c50897860901df3234fb9a9">00019</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<link linkend="_main_8cpp_1af8ff29895c50897860901df3234fb9a9">vssrc</link>=<emphasis role="stringliteral">&quot;#version&#32;450&#32;core\nlayout&#32;(location=0)&#32;in&#32;vec3&#32;pos;\nvoid&#32;main()\n{\n&#32;&#32;&#32;&#32;gl_Position&#32;=&#32;vec4(pos.x,&#32;pos.y,&#32;pos.z,&#32;1.0);\n}&quot;</emphasis>;
<anchor xml:id="_main_8cpp_source_1l00020"/>00020 
<anchor xml:id="_main_8cpp_source_1l00021"/><link linkend="_main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627">00021</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627">main</link>(<emphasis role="keywordtype">int</emphasis>&#32;argc,&#32;<emphasis role="keywordtype">char</emphasis>&#32;**argv)
<anchor xml:id="_main_8cpp_source_1l00022"/>00022 {
<anchor xml:id="_main_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;glfwInit();
<anchor xml:id="_main_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,&#32;4);
<anchor xml:id="_main_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,&#32;5);
<anchor xml:id="_main_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;glfwWindowHint(GLFW_OPENGL_PROFILE,&#32;GLFW_OPENGL_CORE_PROFILE);
<anchor xml:id="_main_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="comment">//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT,&#32;GL_TRUE);</emphasis>
<anchor xml:id="_main_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;GLFWwindow&#32;*window&#32;=&#32;glfwCreateWindow(800,600,<emphasis role="stringliteral">&quot;test&quot;</emphasis>,NULL,NULL);
<anchor xml:id="_main_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(window&#32;==&#32;NULL)
<anchor xml:id="_main_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;{
<anchor xml:id="_main_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;create&#32;GLFW&#32;window&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_main_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glfwTerminate();
<anchor xml:id="_main_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_main_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;}
<anchor xml:id="_main_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;glfwMakeContextCurrent(window);
<anchor xml:id="_main_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_glad_8c_1af70e4674f75bd3bbfedf7979607c65ef">gladLoadGLLoader</link>((GLADloadproc)glfwGetProcAddress))
<anchor xml:id="_main_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;{
<anchor xml:id="_main_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;initialize&#32;GLAD&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
<anchor xml:id="_main_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
<anchor xml:id="_main_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;}
<anchor xml:id="_main_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;glfwSetFramebufferSizeCallback(window,&#32;<link linkend="_main_8cpp_1ad6d843569f32c27dfe18045f65cfb06e">framebufferSizeCallback</link>);
<anchor xml:id="_main_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;glViewport(0,&#32;0,&#32;800,&#32;600);
<anchor xml:id="_main_8cpp_source_1l00043"/>00043 
<anchor xml:id="_main_8cpp_source_1l00044"/>00044 
<anchor xml:id="_main_8cpp_source_1l00045"/>00045 
<anchor xml:id="_main_8cpp_source_1l00046"/>00046 
<anchor xml:id="_main_8cpp_source_1l00047"/>00047 
<anchor xml:id="_main_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<emphasis role="comment">//compile&#32;shader</emphasis>
<anchor xml:id="_main_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="comment">//GLuint&#32;fs,&#32;vs,&#32;program;</emphasis>
<anchor xml:id="_main_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;
<anchor xml:id="_main_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
<anchor xml:id="_main_8cpp_source_1l00052"/>00052 <emphasis role="comment">&#32;&#32;&#32;&#32;fcgraphics::readGLSL(&quot;./shaders/fsMain.glsl&quot;,&#32;fsrc);</emphasis>
<anchor xml:id="_main_8cpp_source_1l00053"/>00053 <emphasis role="comment">&#32;&#32;&#32;&#32;fcgraphics::readGLSL(&quot;./shaders/vsMain.glsl&quot;,&#32;vsrc);</emphasis>
<anchor xml:id="_main_8cpp_source_1l00054"/>00054 <emphasis role="comment"></emphasis>
<anchor xml:id="_main_8cpp_source_1l00055"/>00055 <emphasis role="comment">&#32;&#32;&#32;&#32;fcgraphics::compileGLSL((const&#32;GLchar&#32;*const&#32;*)fsrc.c_str(),&#32;fs,&#32;GL_FRAGMENT_SHADER);</emphasis>
<anchor xml:id="_main_8cpp_source_1l00056"/>00056 <emphasis role="comment">&#32;&#32;&#32;&#32;fcgraphics::compileGLSL((const&#32;GLchar&#32;*const&#32;*)vsrc.c_str(),&#32;vs,&#32;GL_VERTEX_SHADER);</emphasis>
<anchor xml:id="_main_8cpp_source_1l00057"/>00057 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_main_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;GLuint&#32;fs=glCreateShader(GL_FRAGMENT_SHADER),&#32;vs=glCreateShader(GL_VERTEX_SHADER);
<anchor xml:id="_main_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;glShaderSource(fs,&#32;1,&#32;(<emphasis role="keyword">const</emphasis>&#32;GLchar&#32;*<emphasis role="keyword">const</emphasis>&#32;*)<link linkend="_main_8cpp_1a30b1bd2dfe6289dd76b7c4e168393201">fssrc</link>,&#32;NULL);
<anchor xml:id="_main_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;glShaderSource(vs,&#32;1,&#32;(<emphasis role="keyword">const</emphasis>&#32;GLchar&#32;*<emphasis role="keyword">const</emphasis>&#32;*)<link linkend="_main_8cpp_1af8ff29895c50897860901df3234fb9a9">vssrc</link>,&#32;NULL);
<anchor xml:id="_main_8cpp_source_1l00061"/>00061 
<anchor xml:id="_main_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;glCompileShader(fs);
<anchor xml:id="_main_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;glCompileShader(vs);
<anchor xml:id="_main_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;GLuint&#32;program&#32;=&#32;glCreateProgram();
<anchor xml:id="_main_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="comment">//attach&#32;shader</emphasis>
<anchor xml:id="_main_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;glAttachShader(program,&#32;fs);
<anchor xml:id="_main_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;glAttachShader(program,&#32;vs);
<anchor xml:id="_main_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="comment">//link&#32;program</emphasis>
<anchor xml:id="_main_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;glLinkProgram(program);
<anchor xml:id="_main_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;glUseProgram(program);
<anchor xml:id="_main_8cpp_source_1l00071"/>00071 
<anchor xml:id="_main_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;glDeleteShader(fs);
<anchor xml:id="_main_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;glDeleteShader(vs);
<anchor xml:id="_main_8cpp_source_1l00074"/>00074 
<anchor xml:id="_main_8cpp_source_1l00075"/>00075 
<anchor xml:id="_main_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;GLuint&#32;vbo;
<anchor xml:id="_main_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;glGenBuffers(1,&#32;&amp;vbo);
<anchor xml:id="_main_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;GLuint&#32;vao;
<anchor xml:id="_main_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;glGenVertexArrays(1,&#32;&amp;vao);
<anchor xml:id="_main_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;glBindVertexArray(vao);
<anchor xml:id="_main_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;glBindBuffer(GL_ARRAY_BUFFER,&#32;vbo);
<anchor xml:id="_main_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;glBufferData(GL_ARRAY_BUFFER,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_main_8cpp_1a57ce80b3e26f48b9731da8dded2f940c">coords</link>),&#32;<link linkend="_main_8cpp_1a57ce80b3e26f48b9731da8dded2f940c">coords</link>,&#32;GL_STATIC_DRAW);
<anchor xml:id="_main_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;glVertexAttribPointer(0,&#32;3,&#32;GL_FLOAT,&#32;GL_FALSE,&#32;3&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">float</emphasis>),&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)&#32;0);
<anchor xml:id="_main_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;<emphasis role="comment">//location&#32;is&#32;0&#32;so&#32;first&#32;arg&#32;is&#32;0,&#32;vertex&#32;attribute&#32;is&#32;a&#32;vec3&#32;so&#32;2nd&#32;arg&#32;is&#32;3,&#32;type&#32;is&#32;float,&#32;not&#32;normalized&#32;so&#32;false,&#32;the&#32;</emphasis>
<anchor xml:id="_main_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;<emphasis role="comment">//distance&#32;between&#32;vertexs&#32;and&#32;attributes&#32;are&#32;3&#32;sizes&#32;of&#32;floats,&#32;the&#32;offset&#32;is&#32;0&#32;because&#32;the&#32;vbo&#32;is&#32;declared&#32;before.</emphasis>
<anchor xml:id="_main_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;
<anchor xml:id="_main_8cpp_source_1l00087"/>00087 
<anchor xml:id="_main_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(&#32;!glfwWindowShouldClose(window)&#32;)&#32;<emphasis role="comment">//&#32;basic&#32;render&#32;loop(actually&#32;i&#32;rendered&#32;nothing)</emphasis>
<anchor xml:id="_main_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;{
<anchor xml:id="_main_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_main_8cpp_1a8c653c7d0cb3661d19a644ef5ad0b255">inputCallback</link>(window);
<anchor xml:id="_main_8cpp_source_1l00091"/>00091 
<anchor xml:id="_main_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glEnableVertexAttribArray(0);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_main_8cpp_source_1l00093"/>00093 
<anchor xml:id="_main_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glDrawArrays(GL_TRIANGLES,&#32;0,&#32;3);
<anchor xml:id="_main_8cpp_source_1l00095"/>00095 
<anchor xml:id="_main_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glfwSwapBuffers(window);
<anchor xml:id="_main_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glfwPollEvents();
<anchor xml:id="_main_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;}
<anchor xml:id="_main_8cpp_source_1l00099"/>00099 
<anchor xml:id="_main_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;glfwTerminate();
<anchor xml:id="_main_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;EXIT_SUCCESS;
<anchor xml:id="_main_8cpp_source_1l00102"/>00102 }
<anchor xml:id="_main_8cpp_source_1l00103"/>00103 
<anchor xml:id="_main_8cpp_source_1l00104"/><link linkend="_main_8cpp_1ad6d843569f32c27dfe18045f65cfb06e">00104</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_main_8cpp_1ad6d843569f32c27dfe18045f65cfb06e">framebufferSizeCallback</link>(GLFWwindow&#32;*window,&#32;<emphasis role="keywordtype">int</emphasis>&#32;width,&#32;<emphasis role="keywordtype">int</emphasis>&#32;height)
<anchor xml:id="_main_8cpp_source_1l00105"/>00105 {
<anchor xml:id="_main_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;glViewport(0,&#32;0,&#32;width,&#32;height);
<anchor xml:id="_main_8cpp_source_1l00107"/>00107 }
<anchor xml:id="_main_8cpp_source_1l00108"/>00108 
<anchor xml:id="_main_8cpp_source_1l00109"/><link linkend="_main_8cpp_1a8c653c7d0cb3661d19a644ef5ad0b255">00109</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_main_8cpp_1a8c653c7d0cb3661d19a644ef5ad0b255">inputCallback</link>(GLFWwindow&#32;*window)
<anchor xml:id="_main_8cpp_source_1l00110"/>00110 {
<anchor xml:id="_main_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;glfwGetKey(window,&#32;GLFW_KEY_ESCAPE)&#32;==&#32;GLFW_PRESS&#32;)
<anchor xml:id="_main_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;{
<anchor xml:id="_main_8cpp_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glfwSetWindowShouldClose(window,&#32;<emphasis role="keyword">true</emphasis>);
<anchor xml:id="_main_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;}
<anchor xml:id="_main_8cpp_source_1l00115"/>00115 }
</programlisting></section>
