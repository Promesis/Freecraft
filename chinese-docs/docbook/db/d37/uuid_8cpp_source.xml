<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_uuid_8cpp_source" xml:lang="zh">
<title>uuid.cpp</title>
<indexterm><primary>src/data/uuid/uuid.cpp</primary></indexterm>
浏览该文件的文档.<programlisting linenumbering="unnumbered"><anchor xml:id="_uuid_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_uuid_8hpp">uuid.hpp</link>&quot;</emphasis>
<anchor xml:id="_uuid_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;cctype&gt;</emphasis>
<anchor xml:id="_uuid_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;stdexcept&gt;</emphasis>
<anchor xml:id="_uuid_8cpp_source_1l00004"/>00004 
<anchor xml:id="_uuid_8cpp_source_1l00005"/><link linkend="_uuid_8cpp_1a43613b6633f421b8128a9407737df105">00005</link> <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_uuid_8cpp_1a43613b6633f421b8128a9407737df105">uitchex</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;i)
<anchor xml:id="_uuid_8cpp_source_1l00006"/>00006 {
<anchor xml:id="_uuid_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>(i)
<anchor xml:id="_uuid_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;{
<anchor xml:id="_uuid_8cpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;0:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;1:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;2:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;3:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;4:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;5:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;6:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;7:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;8:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;9:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;10:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;11:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;b&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;12:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;c&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;13:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;d&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;14:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;e&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;15:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;}
<anchor xml:id="_uuid_8cpp_source_1l00027"/>00027 }
<anchor xml:id="_uuid_8cpp_source_1l00028"/>00028 
<anchor xml:id="_uuid_8cpp_source_1l00029"/><link linkend="_uuid_8cpp_1a3efeef8ba54054f3fa430a9c0e21c07e">00029</link> <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_uuid_8cpp_1a3efeef8ba54054f3fa430a9c0e21c07e">ishexnum</link>(<emphasis role="keywordtype">char</emphasis>&#32;ch)
<anchor xml:id="_uuid_8cpp_source_1l00030"/>00030 {
<anchor xml:id="_uuid_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;c=tolower(ch);
<anchor xml:id="_uuid_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(c==<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;||&#32;c==<emphasis role="charliteral">&apos;1&apos;</emphasis>&#32;||&#32;c==<emphasis role="charliteral">&apos;2&apos;</emphasis>&#32;||&#32;c==<emphasis role="charliteral">&apos;3&apos;</emphasis>&#32;||&#32;c==<emphasis role="charliteral">&apos;4&apos;</emphasis>&#32;||&#32;c==<emphasis role="charliteral">&apos;5&apos;</emphasis>&#32;||&#32;c==<emphasis role="charliteral">&apos;6&apos;</emphasis>&#32;||&#32;c==<emphasis role="charliteral">&apos;7&apos;</emphasis>&#32;||&#32;c==<emphasis role="charliteral">&apos;8&apos;</emphasis>&#32;||&#32;c==<emphasis role="charliteral">&apos;9&apos;</emphasis>&#32;
<anchor xml:id="_uuid_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;||&#32;c==<emphasis role="charliteral">&apos;a&apos;</emphasis>&#32;||&#32;c==<emphasis role="charliteral">&apos;b&apos;</emphasis>&#32;||&#32;c==<emphasis role="charliteral">&apos;c&apos;</emphasis>&#32;||&#32;c==<emphasis role="charliteral">&apos;d&apos;</emphasis>&#32;||&#32;c==<emphasis role="charliteral">&apos;e&apos;</emphasis>&#32;||&#32;c==<emphasis role="charliteral">&apos;f&apos;</emphasis>);
<anchor xml:id="_uuid_8cpp_source_1l00034"/>00034 }
<anchor xml:id="_uuid_8cpp_source_1l00035"/>00035 
<anchor xml:id="_uuid_8cpp_source_1l00036"/>00036 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;+&#32;&#32;&#32;&#32;+&#32;&#32;&#32;&#32;+&#32;&#32;&#32;&#32;+</emphasis>
<anchor xml:id="_uuid_8cpp_source_1l00037"/>00037 <emphasis role="comment">//xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\0</emphasis>
<anchor xml:id="_uuid_8cpp_source_1l00038"/>00038 <emphasis role="comment">//012345678901234567890123456789012345&#32;6</emphasis>
<anchor xml:id="_uuid_8cpp_source_1l00039"/><link linkend="_classuuid_1a26da1fd9a1991859c54aceb9f88492e2">00039</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classuuid_1a26da1fd9a1991859c54aceb9f88492e2">uuid::setrandomly</link>(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_uuid_8cpp_source_1l00040"/>00040 {
<anchor xml:id="_uuid_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;std::default_random_engine&#32;e;<emphasis role="keywordtype">int</emphasis>&#32;i=0;
<anchor xml:id="_uuid_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;std::uniform_int_distribution&lt;unsigned&#32;int&gt;&#32;u(0,15);
<anchor xml:id="_uuid_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=0;&#32;i&#32;&lt;=&#32;7;&#32;++i)
<anchor xml:id="_uuid_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>[i]=<link linkend="_uuid_8cpp_1a43613b6633f421b8128a9407737df105">uitchex</link>(u(e));
<anchor xml:id="_uuid_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>[8]=<emphasis role="charliteral">&apos;-&apos;</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=9;&#32;i&#32;&lt;=&#32;12;&#32;++i)
<anchor xml:id="_uuid_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>[i]=<link linkend="_uuid_8cpp_1a43613b6633f421b8128a9407737df105">uitchex</link>(u(e));
<anchor xml:id="_uuid_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>[13]=<emphasis role="charliteral">&apos;-&apos;</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=14;&#32;i&#32;&lt;=&#32;17;&#32;++i)
<anchor xml:id="_uuid_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>[i]=<link linkend="_uuid_8cpp_1a43613b6633f421b8128a9407737df105">uitchex</link>(u(e));
<anchor xml:id="_uuid_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>[18]=<emphasis role="charliteral">&apos;-&apos;</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=19;&#32;i&#32;&lt;=&#32;22;&#32;++i)
<anchor xml:id="_uuid_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>[i]=<link linkend="_uuid_8cpp_1a43613b6633f421b8128a9407737df105">uitchex</link>(u(e));
<anchor xml:id="_uuid_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>[23]=<emphasis role="charliteral">&apos;-&apos;</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=24;&#32;i&#32;&lt;=&#32;35;&#32;++i)
<anchor xml:id="_uuid_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>[i]=<link linkend="_uuid_8cpp_1a43613b6633f421b8128a9407737df105">uitchex</link>(u(e));
<anchor xml:id="_uuid_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>[36]=<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00058"/>00058 }
<anchor xml:id="_uuid_8cpp_source_1l00059"/>00059 
<anchor xml:id="_uuid_8cpp_source_1l00060"/><link linkend="_classuuid_1ab1dafae8a5a3a3efc326afaf607a4747">00060</link> <link linkend="_classuuid_1ab1dafae8a5a3a3efc326afaf607a4747">uuid::uuid</link>(<emphasis role="keywordtype">void</emphasis>)
<anchor xml:id="_uuid_8cpp_source_1l00061"/><link linkend="_uuid_8hpp_1adb36eb924610352d2d838c1226d70b70">00061</link> {
<anchor xml:id="_uuid_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;37;&#32;++i)
<anchor xml:id="_uuid_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>[i]=0;
<anchor xml:id="_uuid_8cpp_source_1l00064"/>00064 }
<anchor xml:id="_uuid_8cpp_source_1l00065"/>00065 
<anchor xml:id="_uuid_8cpp_source_1l00066"/><link linkend="_classuuid_1acde47d8530b0858c2b48a7a54766b739">00066</link> <link linkend="_classuuid_1ab1dafae8a5a3a3efc326afaf607a4747">uuid::uuid</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classuuid">uuid</link>&#32;&amp;dat)
<anchor xml:id="_uuid_8cpp_source_1l00067"/>00067 {
<anchor xml:id="_uuid_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;37;&#32;++i)
<anchor xml:id="_uuid_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>[i]=dat.<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>[i];
<anchor xml:id="_uuid_8cpp_source_1l00070"/>00070 }
<anchor xml:id="_uuid_8cpp_source_1l00071"/>00071 
<anchor xml:id="_uuid_8cpp_source_1l00072"/><link linkend="_uuid_8cpp_1a8429edbb20216a3072d6f6fc1617dae2">00072</link> <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_uuid_8cpp_1a8429edbb20216a3072d6f6fc1617dae2">checksyntax</link>(<emphasis role="keyword">const</emphasis>&#32;Json::String&#32;&amp;str)
<anchor xml:id="_uuid_8cpp_source_1l00073"/>00073 {
<anchor xml:id="_uuid_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i;
<anchor xml:id="_uuid_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(str.length()&#32;!=&#32;36)
<anchor xml:id="_uuid_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=0;&#32;i&#32;&lt;=&#32;7;&#32;++i)
<anchor xml:id="_uuid_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_uuid_8cpp_1a3efeef8ba54054f3fa430a9c0e21c07e">ishexnum</link>(str[i]))
<anchor xml:id="_uuid_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(str[8]!=<emphasis role="charliteral">&apos;-&apos;</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=9;&#32;i&#32;&lt;=&#32;12;&#32;++i)
<anchor xml:id="_uuid_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_uuid_8cpp_1a3efeef8ba54054f3fa430a9c0e21c07e">ishexnum</link>(str[i]))
<anchor xml:id="_uuid_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(str[13]!=<emphasis role="charliteral">&apos;-&apos;</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=14;&#32;i&#32;&lt;=&#32;17;&#32;++i)
<anchor xml:id="_uuid_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_uuid_8cpp_1a3efeef8ba54054f3fa430a9c0e21c07e">ishexnum</link>(str[i]))
<anchor xml:id="_uuid_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(str[18]!=<emphasis role="charliteral">&apos;-&apos;</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=19;&#32;i&#32;&lt;=&#32;22;&#32;++i)
<anchor xml:id="_uuid_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_uuid_8cpp_1a3efeef8ba54054f3fa430a9c0e21c07e">ishexnum</link>(str[i]))
<anchor xml:id="_uuid_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(str[23]!=<emphasis role="charliteral">&apos;-&apos;</emphasis>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(i=24;&#32;i&#32;&lt;=&#32;35;&#32;++i)
<anchor xml:id="_uuid_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_uuid_8cpp_1a3efeef8ba54054f3fa430a9c0e21c07e">ishexnum</link>(str[i]))
<anchor xml:id="_uuid_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00097"/>00097 }
<anchor xml:id="_uuid_8cpp_source_1l00098"/>00098 
<anchor xml:id="_uuid_8cpp_source_1l00099"/><link linkend="_classuuid_1a1306d76a4a807950b7ba1bd9e2f6f8e0">00099</link> <link linkend="_classuuid_1ab1dafae8a5a3a3efc326afaf607a4747">uuid::uuid</link>(<emphasis role="keyword">const</emphasis>&#32;Json::String&#32;&amp;str)
<anchor xml:id="_uuid_8cpp_source_1l00100"/>00100 {
<anchor xml:id="_uuid_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(!<link linkend="_uuid_8cpp_1a8429edbb20216a3072d6f6fc1617dae2">checksyntax</link>(str))
<anchor xml:id="_uuid_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">throw</emphasis>&#32;<link linkend="_classfc_syntax_exception">fcSyntaxException</link>(<emphasis role="stringliteral">&quot;UUID&#32;format&#32;is&#32;not&#32;wanted&quot;</emphasis>);
<anchor xml:id="_uuid_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&#32;&lt;&#32;str.length();&#32;++i)
<anchor xml:id="_uuid_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>[i]=str[i];
<anchor xml:id="_uuid_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>[str.length()]=<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
<anchor xml:id="_uuid_8cpp_source_1l00106"/>00106 }
<anchor xml:id="_uuid_8cpp_source_1l00107"/>00107 
<anchor xml:id="_uuid_8cpp_source_1l00108"/><link linkend="_classuuid_1a8dfc88410c5724700833169dc0293763">00108</link> uuid::operator&#32;Json::String(<emphasis role="keywordtype">void</emphasis>)<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_uuid_8cpp_source_1l00109"/>00109 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_uuid_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Json::String(data);
<anchor xml:id="_uuid_8cpp_source_1l00111"/>00111 }
<anchor xml:id="_uuid_8cpp_source_1l00112"/>00112 
<anchor xml:id="_uuid_8cpp_source_1l00113"/><link linkend="_classuuid_1ad65f173ce0d832fdd8689174007be1cb">00113</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classuuid_1adb36eb924610352d2d838c1226d70b70">uuid::operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classuuid">uuid</link>&#32;&amp;dat)<emphasis role="keyword">&#32;const</emphasis>
<anchor xml:id="_uuid_8cpp_source_1l00114"/>00114 <emphasis role="keyword"></emphasis>{
<anchor xml:id="_uuid_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dat.<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>&#32;==&#32;<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>;
<anchor xml:id="_uuid_8cpp_source_1l00116"/>00116 }
<anchor xml:id="_uuid_8cpp_source_1l00117"/>00117 
<anchor xml:id="_uuid_8cpp_source_1l00118"/><link linkend="_classuuid_1adb36eb924610352d2d838c1226d70b70">00118</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_uuid_8cpp_1adb36eb924610352d2d838c1226d70b70">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;Json::String&#32;&amp;datL,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classuuid">uuid</link>&#32;&amp;datR)
<anchor xml:id="_uuid_8cpp_source_1l00119"/>00119 {
<anchor xml:id="_uuid_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;datR.<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>&#32;==&#32;datL;
<anchor xml:id="_uuid_8cpp_source_1l00121"/>00121 }
<anchor xml:id="_uuid_8cpp_source_1l00122"/>00122 
<anchor xml:id="_uuid_8cpp_source_1l00123"/><link linkend="_classuuid_1a070227fb137d354bf8b909d87a06af14">00123</link> <emphasis role="keyword">const</emphasis>&#32;<link linkend="_classuuid">uuid</link>&#32;&amp;<link linkend="_classuuid_1a070227fb137d354bf8b909d87a06af14">uuid::operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classuuid">uuid</link>&#32;&amp;dat)
<anchor xml:id="_uuid_8cpp_source_1l00124"/>00124 {
<anchor xml:id="_uuid_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;37;&#32;++i)
<anchor xml:id="_uuid_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>[i]&#32;=&#32;dat.<link linkend="_classuuid_1aad814226a0ef1188e55780c0d6b4ca13">data</link>[i];
<anchor xml:id="_uuid_8cpp_source_1l00127"/>00127 }
</programlisting></section>
