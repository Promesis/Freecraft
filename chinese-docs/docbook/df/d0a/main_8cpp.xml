<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_main_8cpp" xml:lang="zh">
<title>src/main.cpp 文件参考</title>
<indexterm><primary>src/main.cpp</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;glad/glad.h&quot;<?linebreak?>#include &quot;glfw/glfw3.h&quot;<?linebreak?>#include &quot;./graphics/fcglsl.hpp&quot;<?linebreak?>#include &lt;iostream&gt;<?linebreak?></programlisting>main.cpp 的引用(Include)关系图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../da/dce/main_8cpp__incl.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>函数    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_main_8cpp_1ad6d843569f32c27dfe18045f65cfb06e">framebufferSizeCallback</link> (GLFWwindow *, int, int)</para>
</listitem>
            <listitem><para>void <link linkend="_main_8cpp_1a8c653c7d0cb3661d19a644ef5ad0b255">inputCallback</link> (GLFWwindow *)</para>
</listitem>
            <listitem><para>int <link linkend="_main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627">main</link> (int argc, char **argv)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>变量    </title>
        <itemizedlist>
            <listitem><para>GLfloat <link linkend="_main_8cpp_1a57ce80b3e26f48b9731da8dded2f940c">coords</link> []</para>
</listitem>
            <listitem><para>const GLchar * <link linkend="_main_8cpp_1a30b1bd2dfe6289dd76b7c4e168393201">fssrc</link> =&quot;#version 450 core\nout vec4 color;\nvoid <link linkend="_main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627">main</link>()\n{\n color = vec4(1.0, 0.5, 0.2, 1.0);\n}&quot;</para>
</listitem>
            <listitem><para>const GLchar * <link linkend="_main_8cpp_1af8ff29895c50897860901df3234fb9a9">vssrc</link> =&quot;#version 450 core\nlayout (location=0) in vec3 pos;\nvoid <link linkend="_main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627">main</link>()\n{\n gl_Position = vec4(pos.x, pos.y, pos.z, 1.0);\n}&quot;</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>函数说明</title>
<anchor xml:id="_main_8cpp_1ad6d843569f32c27dfe18045f65cfb06e"/><section>
    <title>framebufferSizeCallback()</title>
<indexterm><primary>framebufferSizeCallback</primary><secondary>main.cpp</secondary></indexterm>
<indexterm><primary>main.cpp</primary><secondary>framebufferSizeCallback</secondary></indexterm>
<para><computeroutput>void framebufferSizeCallback (GLFWwindow * window, int width, int height)</computeroutput></para><para>
在文件 <link linkend="_main_8cpp_source">main.cpp</link> 第 <link linkend="_main_8cpp_source_1l00104">104</link> 行定义.</para>
<programlisting linenumbering="unnumbered">00105 {
00106 &#32;&#32;&#32;&#32;glViewport(0,&#32;0,&#32;width,&#32;height);
00107 }
</programlisting>这是这个函数的调用关系图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../df/d0a/main_8cpp_ad6d843569f32c27dfe18045f65cfb06e_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_main_8cpp_1a8c653c7d0cb3661d19a644ef5ad0b255"/><section>
    <title>inputCallback()</title>
<indexterm><primary>inputCallback</primary><secondary>main.cpp</secondary></indexterm>
<indexterm><primary>main.cpp</primary><secondary>inputCallback</secondary></indexterm>
<para><computeroutput>void inputCallback (GLFWwindow * window)</computeroutput></para><para>
在文件 <link linkend="_main_8cpp_source">main.cpp</link> 第 <link linkend="_main_8cpp_source_1l00109">109</link> 行定义.</para>
<programlisting linenumbering="unnumbered">00110 {
00111 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(&#32;glfwGetKey(window,&#32;GLFW_KEY_ESCAPE)&#32;==&#32;GLFW_PRESS&#32;)
00112 &#32;&#32;&#32;&#32;{
00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glfwSetWindowShouldClose(window,&#32;<emphasis role="keyword">true</emphasis>);
00114 &#32;&#32;&#32;&#32;}
00115 }
</programlisting>这是这个函数的调用关系图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../df/d0a/main_8cpp_a8c653c7d0cb3661d19a644ef5ad0b255_icgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
<anchor xml:id="_main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627"/><section>
    <title>main()</title>
<indexterm><primary>main</primary><secondary>main.cpp</secondary></indexterm>
<indexterm><primary>main.cpp</primary><secondary>main</secondary></indexterm>
<para><computeroutput>int main (int argc, char ** argv)</computeroutput></para><para>
在文件 <link linkend="_main_8cpp_source">main.cpp</link> 第 <link linkend="_main_8cpp_source_1l00021">21</link> 行定义.</para>
<programlisting linenumbering="unnumbered">00022 {
00023 &#32;&#32;&#32;&#32;glfwInit();
00024 &#32;&#32;&#32;&#32;glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,&#32;4);
00025 &#32;&#32;&#32;&#32;glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,&#32;5);
00026 &#32;&#32;&#32;&#32;glfwWindowHint(GLFW_OPENGL_PROFILE,&#32;GLFW_OPENGL_CORE_PROFILE);
00027 &#32;&#32;&#32;&#32;<emphasis role="comment">//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT,&#32;GL_TRUE);</emphasis>
00028 &#32;&#32;&#32;&#32;GLFWwindow&#32;*window&#32;=&#32;glfwCreateWindow(800,600,<emphasis role="stringliteral">&quot;test&quot;</emphasis>,NULL,NULL);
00029 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(window&#32;==&#32;NULL)
00030 &#32;&#32;&#32;&#32;{
00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;create&#32;GLFW&#32;window&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glfwTerminate();
00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
00034 &#32;&#32;&#32;&#32;}
00035 &#32;&#32;&#32;&#32;glfwMakeContextCurrent(window);
00036 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_glad_8c_1af70e4674f75bd3bbfedf7979607c65ef">gladLoadGLLoader</link>((GLADloadproc)glfwGetProcAddress))
00037 &#32;&#32;&#32;&#32;{
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Failed&#32;to&#32;initialize&#32;GLAD&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;-1;
00040 &#32;&#32;&#32;&#32;}
00041 &#32;&#32;&#32;&#32;glfwSetFramebufferSizeCallback(window,&#32;<link linkend="_main_8cpp_1ad6d843569f32c27dfe18045f65cfb06e">framebufferSizeCallback</link>);
00042 &#32;&#32;&#32;&#32;glViewport(0,&#32;0,&#32;800,&#32;600);
00043 
00044 
00045 
00046 
00047 
00048 &#32;&#32;&#32;&#32;<emphasis role="comment">//compile&#32;shader</emphasis>
00049 &#32;&#32;&#32;&#32;<emphasis role="comment">//GLuint&#32;fs,&#32;vs,&#32;program;</emphasis>
00050 &#32;&#32;&#32;&#32;
00051 &#32;&#32;&#32;&#32;<emphasis role="comment">/*</emphasis>
00052 <emphasis role="comment">&#32;&#32;&#32;&#32;fcgraphics::readGLSL(&quot;./shaders/fsMain.glsl&quot;,&#32;fsrc);&#x240D;</emphasis>
00053 <emphasis role="comment">&#32;&#32;&#32;&#32;fcgraphics::readGLSL(&quot;./shaders/vsMain.glsl&quot;,&#32;vsrc);&#x240D;</emphasis>
00054 <emphasis role="comment"></emphasis>
00055 <emphasis role="comment">&#32;&#32;&#32;&#32;fcgraphics::compileGLSL((const&#32;GLchar&#32;*const&#32;*)fsrc.c_str(),&#32;fs,&#32;GL_FRAGMENT_SHADER);&#x240D;</emphasis>
00056 <emphasis role="comment">&#32;&#32;&#32;&#32;fcgraphics::compileGLSL((const&#32;GLchar&#32;*const&#32;*)vsrc.c_str(),&#32;vs,&#32;GL_VERTEX_SHADER);&#x240D;</emphasis>
00057 <emphasis role="comment">&#32;&#32;&#32;&#32;*/</emphasis>
00058 &#32;&#32;&#32;&#32;GLuint&#32;fs=glCreateShader(GL_FRAGMENT_SHADER),&#32;vs=glCreateShader(GL_VERTEX_SHADER);
00059 &#32;&#32;&#32;&#32;glShaderSource(fs,&#32;1,&#32;(<emphasis role="keyword">const</emphasis>&#32;GLchar&#32;*<emphasis role="keyword">const</emphasis>&#32;*)<link linkend="_main_8cpp_1a30b1bd2dfe6289dd76b7c4e168393201">fssrc</link>,&#32;NULL);
00060 &#32;&#32;&#32;&#32;glShaderSource(vs,&#32;1,&#32;(<emphasis role="keyword">const</emphasis>&#32;GLchar&#32;*<emphasis role="keyword">const</emphasis>&#32;*)<link linkend="_main_8cpp_1af8ff29895c50897860901df3234fb9a9">vssrc</link>,&#32;NULL);
00061 
00062 &#32;&#32;&#32;&#32;glCompileShader(fs);
00063 &#32;&#32;&#32;&#32;glCompileShader(vs);
00064 &#32;&#32;&#32;&#32;GLuint&#32;program&#32;=&#32;glCreateProgram();
00065 &#32;&#32;&#32;&#32;<emphasis role="comment">//attach&#32;shader</emphasis>
00066 &#32;&#32;&#32;&#32;glAttachShader(program,&#32;fs);
00067 &#32;&#32;&#32;&#32;glAttachShader(program,&#32;vs);
00068 &#32;&#32;&#32;&#32;<emphasis role="comment">//link&#32;program</emphasis>
00069 &#32;&#32;&#32;&#32;glLinkProgram(program);
00070 &#32;&#32;&#32;&#32;glUseProgram(program);
00071 
00072 &#32;&#32;&#32;&#32;glDeleteShader(fs);
00073 &#32;&#32;&#32;&#32;glDeleteShader(vs);
00074 
00075 
00076 &#32;&#32;&#32;&#32;GLuint&#32;vbo;
00077 &#32;&#32;&#32;&#32;glGenBuffers(1,&#32;&amp;vbo);
00078 &#32;&#32;&#32;&#32;GLuint&#32;vao;
00079 &#32;&#32;&#32;&#32;glGenVertexArrays(1,&#32;&amp;vao);
00080 &#32;&#32;&#32;&#32;glBindVertexArray(vao);
00081 &#32;&#32;&#32;&#32;glBindBuffer(GL_ARRAY_BUFFER,&#32;vbo);
00082 &#32;&#32;&#32;&#32;glBufferData(GL_ARRAY_BUFFER,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_main_8cpp_1a57ce80b3e26f48b9731da8dded2f940c">coords</link>),&#32;<link linkend="_main_8cpp_1a57ce80b3e26f48b9731da8dded2f940c">coords</link>,&#32;GL_STATIC_DRAW);
00083 &#32;&#32;&#32;&#32;glVertexAttribPointer(0,&#32;3,&#32;GL_FLOAT,&#32;GL_FALSE,&#32;3&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">float</emphasis>),&#32;(<emphasis role="keywordtype">void</emphasis>&#32;*)&#32;0);
00084 &#32;&#32;&#32;&#32;<emphasis role="comment">//location&#32;is&#32;0&#32;so&#32;first&#32;arg&#32;is&#32;0,&#32;vertex&#32;attribute&#32;is&#32;a&#32;vec3&#32;so&#32;2nd&#32;arg&#32;is&#32;3,&#32;type&#32;is&#32;float,&#32;not&#32;normalized&#32;so&#32;false,&#32;the&#32;</emphasis>
00085 &#32;&#32;&#32;&#32;<emphasis role="comment">//distance&#32;between&#32;vertexs&#32;and&#32;attributes&#32;are&#32;3&#32;sizes&#32;of&#32;floats,&#32;the&#32;offset&#32;is&#32;0&#32;because&#32;the&#32;vbo&#32;is&#32;declared&#32;before.</emphasis>
00086 &#32;&#32;&#32;&#32;
00087 
00088 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(&#32;!glfwWindowShouldClose(window)&#32;)&#32;<emphasis role="comment">//&#32;basic&#32;render&#32;loop(actually&#32;i&#32;rendered&#32;nothing)</emphasis>
00089 &#32;&#32;&#32;&#32;{
00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_main_8cpp_1a8c653c7d0cb3661d19a644ef5ad0b255">inputCallback</link>(window);
00091 
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glEnableVertexAttribArray(0);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00093 
00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glDrawArrays(GL_TRIANGLES,&#32;0,&#32;3);
00095 
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glfwSwapBuffers(window);
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;glfwPollEvents();
00098 &#32;&#32;&#32;&#32;}
00099 
00100 &#32;&#32;&#32;&#32;glfwTerminate();
00101 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;EXIT_SUCCESS;
00102 }
</programlisting>函数调用图:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="../../df/d0a/main_8cpp_a3c04138a5bfe5d72780bb7e82a18e627_cgraph.svg"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
</section>
</section>
<section>
<title>变量说明</title>
<anchor xml:id="_main_8cpp_1a57ce80b3e26f48b9731da8dded2f940c"/><section>
    <title>coords</title>
<indexterm><primary>coords</primary><secondary>main.cpp</secondary></indexterm>
<indexterm><primary>main.cpp</primary><secondary>coords</secondary></indexterm>
<para><computeroutput>GLfloat coords[]</computeroutput></para><emphasis role="strong">初始值:</emphasis><programlisting linenumbering="unnumbered">{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-0.5,&#32;-0.5,&#32;0.0,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.5,&#32;-0.5,&#32;0.0,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0.5,&#32;&#32;0.5,&#32;0.0
&#32;&#32;&#32;&#32;}
</programlisting><para>
在文件 <link linkend="_main_8cpp_source">main.cpp</link> 第 <link linkend="_main_8cpp_source_1l00011">11</link> 行定义.</para>
</section>
<anchor xml:id="_main_8cpp_1a30b1bd2dfe6289dd76b7c4e168393201"/><section>
    <title>fssrc</title>
<indexterm><primary>fssrc</primary><secondary>main.cpp</secondary></indexterm>
<indexterm><primary>main.cpp</primary><secondary>fssrc</secondary></indexterm>
<para><computeroutput>const GLchar* fssrc =&quot;#version 450 core\nout vec4 color;\nvoid <link linkend="_main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627">main</link>()\n{\n color = vec4(1.0, 0.5, 0.2, 1.0);\n}&quot;</computeroutput></para><para>
在文件 <link linkend="_main_8cpp_source">main.cpp</link> 第 <link linkend="_main_8cpp_source_1l00018">18</link> 行定义.</para>
</section>
<anchor xml:id="_main_8cpp_1af8ff29895c50897860901df3234fb9a9"/><section>
    <title>vssrc</title>
<indexterm><primary>vssrc</primary><secondary>main.cpp</secondary></indexterm>
<indexterm><primary>main.cpp</primary><secondary>vssrc</secondary></indexterm>
<para><computeroutput>const GLchar * vssrc =&quot;#version 450 core\nlayout (location=0) in vec3 pos;\nvoid <link linkend="_main_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627">main</link>()\n{\n gl_Position = vec4(pos.x, pos.y, pos.z, 1.0);\n}&quot;</computeroutput></para><para>
在文件 <link linkend="_main_8cpp_source">main.cpp</link> 第 <link linkend="_main_8cpp_source_1l00019">19</link> 行定义.</para>
</section>
</section>
</section>
