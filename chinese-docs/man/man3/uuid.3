.TH "uuid" 3 "2023年 一月 25日 星期三" "Version 00.01a07-dbg" "Freecraft" \" -*- nroff -*-
.ad l
.nh
.SH NAME
uuid
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <uuid\&.hpp>\fP
.SS "Public 成员函数"

.in +1c
.ti -1c
.RI "void \fBsetrandomly\fP (void)"
.br
.RI "set uuid randomly\&. "
.ti -1c
.RI "\fBuuid\fP (void)"
.br
.RI "Construct a new uuid object\&. "
.ti -1c
.RI "\fBuuid\fP (const \fBuuid\fP &dat)"
.br
.RI "Construct a new uuid object\&. "
.ti -1c
.RI "\fBuuid\fP (const Json::String &str)"
.br
.RI "Construct a new uuid object\&. "
.ti -1c
.RI "const \fBuuid\fP & \fBoperator=\fP (const \fBuuid\fP &dat)"
.br
.RI "assignment operator overloading\&. "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBuuid\fP &dat) const"
.br
.RI "check if two uuids is equal\&. "
.ti -1c
.RI "\fBoperator Json::String\fP (void) const"
.br
.RI "conversation function\&. "
.in -1c
.SS "Protected 属性"

.in +1c
.ti -1c
.RI "char \fBdata\fP [37]"
.br
.in -1c
.SS "友元"

.in +1c
.ti -1c
.RI "bool \fBoperator==\fP (const Json::String &datL, const \fBuuid\fP &datR)"
.br
.RI "same\&. "
.in -1c
.SH "详细描述"
.PP 
在文件 \fBuuid\&.hpp\fP 第 \fB11\fP 行定义\&.
.SH "构造及析构函数说明"
.PP 
.SS "uuid::uuid (void)"

.PP
Construct a new uuid object\&. 
.PP
在文件 \fBuuid\&.cpp\fP 第 \fB60\fP 行定义\&..PP
.nf
61 {
62     for(int i=0; i < 37; ++i)
63         data[i]=0;
64 }
.fi

.SS "uuid::uuid (const \fBuuid\fP & dat)"

.PP
Construct a new uuid object\&. 
.PP
\fB参数\fP
.RS 4
\fIdat\fP 
.RE
.PP

.PP
在文件 \fBuuid\&.cpp\fP 第 \fB66\fP 行定义\&..PP
.nf
67 {
68     for(int i=0; i < 37; ++i)
69         data[i]=dat\&.data[i];
70 }
.fi

.SS "uuid::uuid (const Json::String & str)"

.PP
Construct a new uuid object\&. 
.PP
\fB参数\fP
.RS 4
\fIstr\fP 
.RE
.PP

.PP
在文件 \fBuuid\&.cpp\fP 第 \fB99\fP 行定义\&..PP
.nf
100 {
101     if(!checksyntax(str))
102         throw fcSyntaxException("UUID format is not wanted");
103     for(int i=0; i < str\&.length(); ++i)
104         data[i]=str[i];
105     data[str\&.length()]='\\0';
106 }
.fi

.SH "成员函数说明"
.PP 
.SS "uuid::operator Json::String (void) const"

.PP
conversation function\&. 
.PP
在文件 \fBuuid\&.cpp\fP 第 \fB108\fP 行定义\&..PP
.nf
109 {
110     return Json::String(data);
111 }
.fi

.SS "const \fBuuid\fP & uuid::operator= (const \fBuuid\fP & dat)"

.PP
assignment operator overloading\&. 
.PP
\fB参数\fP
.RS 4
\fIdat\fP uuid to assign\&. 
.RE
.PP
\fB返回\fP
.RS 4
const uuid& 
.RE
.PP

.PP
在文件 \fBuuid\&.cpp\fP 第 \fB123\fP 行定义\&..PP
.nf
124 {
125     for(int i=0; i<37; ++i)
126         data[i] = dat\&.data[i];
127 }
.fi

.SS "bool uuid::operator== (const \fBuuid\fP & dat) const"

.PP
check if two uuids is equal\&. 
.PP
\fB参数\fP
.RS 4
\fIdat\fP 
.RE
.PP
\fB返回\fP
.RS 4
true equal\&. 
.PP
false not equal\&. 
.RE
.PP

.PP
在文件 \fBuuid\&.cpp\fP 第 \fB113\fP 行定义\&..PP
.nf
114 {
115     return dat\&.data == data;
116 }
.fi

.SS "void uuid::setrandomly (void)"

.PP
set uuid randomly\&. 
.PP
在文件 \fBuuid\&.cpp\fP 第 \fB39\fP 行定义\&..PP
.nf
40 {
41     std::default_random_engine e;int i=0;
42     std::uniform_int_distribution<unsigned int> u(0,15);
43     for(i=0; i <= 7; ++i)
44         data[i]=uitchex(u(e));
45     data[8]='\-';
46     for(i=9; i <= 12; ++i)
47         data[i]=uitchex(u(e));
48     data[13]='\-';
49     for(i=14; i <= 17; ++i)
50         data[i]=uitchex(u(e));
51     data[18]='\-';
52     for(i=19; i <= 22; ++i)
53         data[i]=uitchex(u(e));
54     data[23]='\-';
55     for(i=24; i <= 35; ++i)
56         data[i]=uitchex(u(e));
57     data[36]='\\0';
58 }
.fi

.SH "友元及相关函数文档"
.PP 
.SS "bool operator== (const Json::String & datL, const \fBuuid\fP & datR)\fC [friend]\fP"

.PP
same\&. reversed\&.
.PP
\fB参数\fP
.RS 4
\fIdat\fP 
.br
\fIdat\fP 
.RE
.PP
\fB返回\fP
.RS 4
true 
.PP
false 
.RE
.PP

.PP
在文件 \fBuuid\&.cpp\fP 第 \fB118\fP 行定义\&..PP
.nf
119 {
120     return datR\&.data == datL;
121 }
.fi

.SH "类成员变量说明"
.PP 
.SS "char uuid::data[37]\fC [protected]\fP"

.PP
在文件 \fBuuid\&.hpp\fP 第 \fB14\fP 行定义\&.

.SH "作者"
.PP 
由 Doyxgen 通过分析 Freecraft 的 源代码自动生成\&.
